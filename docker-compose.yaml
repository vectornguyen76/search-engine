version: "3"
services:
  triton_server:
    container_name: triton_server
    image: nvcr.io/nvidia/tritonserver:23.01-py3
    ports:
      - 8000:8000
      - 8001:8001
      - 8002:8002
    command: tritonserver --model-repository=/models
    volumes:
      - ./triton-server/model_repository:/models
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: 1
              capabilities: [gpu]
    profiles: ["prod"]

  qdrant_db:
    container_name: qdrant_db
    image: qdrant/qdrant:v1.5.1
    ports:
      - 6333:6333
      - 6334:6334
    volumes:
      - qdrant_db_data:/qdrant/storage

  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:7.10.0
    container_name: elasticsearch
    environment:
      - node.name=elasticsearch
      - cluster.name=es-docker-cluster
      - discovery.type=single-node
      - bootstrap.memory_lock=true
      - "ES_JAVA_OPTS=-Xms1024m -Xmx1024m"
    ulimits:
      memlock:
        soft: -1
        hard: -1
    ports:
      - 9200:9200
    healthcheck:
      test: curl --fail http://localhost:9200/_cat/health || exit 1
      interval: 10s
      timeout: 1s
      retries: 10
    volumes:
      - elastic_search_data:/usr/share/elasticsearch/data

  kibana:
    image: docker.elastic.co/kibana/kibana:7.10.0
    container_name: kibana
    ports:
      - 5601:5601
    environment:
      ELASTICSEARCH_URL: http://elasticsearch:9200
      ELASTICSEARCH_HOSTS: http://elasticsearch:9200
    depends_on:
      elasticsearch:
        condition: service_healthy

  image_search:
    container_name: image-search-container
    image: vectornguyen76/image_search
    build:
      context: ./image_search
      dockerfile: Dockerfile
    environment:
      - QDRANT_URL=http://qdrant_db:6334
      - TRITON_SERVER_URL=triton_server:8001
    ports:
      - 7000:7000
    volumes:
      - ./image_search/logs:/app/logs
    depends_on:
      - qdrant_db

  text_search:
    container_name: text-search-container
    image: vectornguyen76/text_search
    build:
      context: ./text_search
      dockerfile: Dockerfile
    ports:
      - 6000:6000
    environment:
      ELASTICSEARCH_HOST: http://elasticsearch:9200
    volumes:
      - ./text_search/logs:/app/logs
    depends_on:
      elasticsearch:
        condition: service_healthy

  postgres_db:
    container_name: postgres_db
    image: postgres:14.1
    env_file:
      - ./backend/.env.local
    ports:
      - 65432:5432
    volumes:
      - postgresql_data:/var/lib/postgresql/data/
      - postgresql_data_backups:/backups
      - ./backend/scripts/postgres:/scripts

  backend_service:
    container_name: backend_container
    image: vectornguyen76/backend_search_engine
    build:
      context: ./backend
      dockerfile: Dockerfile
    env_file:
      - ./backend/.env.local
    ports:
      - 5000:5000
    volumes:
      - ./backend/logs:/app/logs
    depends_on:
      - postgres_db

  frontend_service:
    container_name: frontend_container
    image: vectornguyen76/frontend_search_engine
    build:
      context: ./frontend
      dockerfile: Dockerfile
    ports:
      - 3000:3000

  nginx_dev_service:
    container_name: nginx_container
    image: nginx:1.25.1-alpine
    ports:
      - 80:80
    volumes:
      - ./nginx/develop.conf:/etc/nginx/conf.d/default.conf
      - ./nginx/log:/var/log/nginx/
    depends_on:
      - frontend_service
      - backend_service
    profiles: ["dev"]

  nginx_service:
    container_name: nginx_container
    image: nginx:1.25.1-alpine
    ports:
      - 80:80
      - 443:443
    volumes:
      - ./nginx/default.conf:/etc/nginx/conf.d/default.conf
      - ./nginx/log:/var/log/nginx/
      - ./nginx/certificates:/etc/nginx/ssl
      - ./nginx/certificates/bot:/etc/nginx/ssl/bot
    depends_on:
      - frontend_service
      - backend_service
    profiles: ["prod"]

volumes:
  elastic_search_data:
    driver: local
  qdrant_db_data:
    driver: local
  postgresql_data:
    driver: local
  postgresql_data_backups:
    driver: local
